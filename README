NAME
    Net::LDAP::SimpleServer - Minimal-configuration, read-only LDAP server

VERSION
    This document describes Net::LDAP::SimpleServer version 0.0.7

SYNOPSIS
    WORK IN PROGRESS!! NOT READY TO USE YET!!

        package MyServer;

        use Net::LDAP::SimpleServer;

        # Or, specifying a Net::Server personality
        use Net::LDAP::SimpleServer 'PreFork';

        # using default configuration file
        my $server = Net::LDAP::SimpleServer->new();

        # passing a specific configuration file
        my $server = Net::LDAP::SimpleServer->new({
            conf_file => '/etc/ldapconfig.conf'
        });

        # passing configurations in a hash
        my $server = Net::LDAP::SimpleServer->new({
            port => 5000,
            data => '/path/to/data.ldif',
        });

        # make it spin
        $server->run();

    The default configuration file is:

        ${HOME}/.ldapsimpleserver.conf

DESCRIPTION
    As the name suggests, this module aims to implement a simple LDAP
    server, using many components already available in CPAN. It can be used
    for prototyping and/or development purposes. This is NOT intended to be
    a production-grade server, altough some brave souls in small offices
    might use it as such.

    As of November 2010, the server will simply load a LDIF file and serve
    its contents through the LDAP protocol. Many operations are NOT
    available yet, notably writing into the directory tree, but we would
    like to implement that in a near future.

CONSTRUCTOR
    The constructors will follow the rules defined by Net::Server, but most
    notably we have the two forms below:

    new()
        Attempts to create a server by using the default configuration file,
        "${HOME}/.ldapsimpleserver.conf".

    new( HASHREF )
        Attempts to create a server by using the options specified in a hash
        reference rather than reading them from a configuration file.

METHODS
    options()
        As specified in Net::Server, this method creates new options for
        the, server, namely:

            data - the LDIF data file used by LDIFStore

            root_dn - the administrator DN of the repository

            root_pw - the password for root_dn

    default_values()
        As specified in Net::Server, this method provides default values for
        a number of options. In Net::LDAP::SimpleServer, this method is
        defined as:

            sub default_values {
                return {
                    host         => '*',
                    port         => 389,
                    proto        => 'tcp',
                    root_id      => 'cn=root',
                    root_pw      => 'ldappw',
                    syslog_ident => 'Net::LDAP::SimpleServer-'
                        . $Net::LDAP::SimpleServer::VERSION,
                    conf_file => DEFAULT_CONFIG_FILE,
                };
            }

        Notice that we do set a default password for the "cn=root" DN. This
        allows for out-of-the-box testing, but make sure you change the
        password when putting this to production use.

    post_configure_hook()
        Method specified by Net::Server to validate the passed options

    process_request()
        Method specified by Net::Server to actually handle one connection.
        In this module it basically delegates the processing to
        Net::LDAP::SimpleServer::ProtocolHandler.

DIAGNOSTICS
    "Error message here, perhaps with %s placeholders"
        [Description of error here]

    "Another error message here"
        [Description of error here]

        [Et cetera, et cetera]

CONFIGURATION AND ENVIRONMENT
    Net::LDAP::SimpleServer may use a configuration file to specify the
    server settings. If no file is specified and options are not passed in a
    hash, this module will look for a default configuration file named
    "${HOME}/.ldapsimpleserver.conf".

        data /path/to/a/ldif/file.ldif
        #port 389
        #root_id cn=root
        #root_pw somepassword
        #objectclass_req (true|false)
        #user_tree dc=some,dc=subtree,dc=com
        #user_id_attr uid
        #user_pw_attr password

DEPENDENCIES
    Net::LDAP

    Net::LDAP::Server

    Net::Server

    UNIVERSAL::isa

    Carp

    File::HomeDir

    File::Spec::Functions

    Scalar::Util

    Config::General

    Net::LDAP::SimpleServer::LDIFStore

INCOMPATIBILITIES
    None reported.

BUGS AND LIMITATIONS
    No bugs have been reported.

    Please report any bugs or feature requests to
    "bug-net-ldap-simpleserver@rt.cpan.org", or through the web interface at
    <http://rt.cpan.org>.

AUTHOR
    Alexei Znamensky "<russoz@cpan.org>"

LICENCE AND COPYRIGHT
    Copyright (c) 2010, Alexei Znamensky "<russoz@cpan.org>". All rights
    reserved.

    This module is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself. See perlartistic.

DISCLAIMER OF WARRANTY
    BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
    FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
    OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
    PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
    EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
    ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
    YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
    NECESSARY SERVICING, REPAIR, OR CORRECTION.

    IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
    WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
    REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE LIABLE
    TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR
    CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
    SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
    RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
    FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
    SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
    DAMAGES.

